// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

model Company {
  id               String     @id @default(cuid())
  name             String     @unique
  users            User[]     @relation("CompanyToUser")
  image            String
  deletedAt        DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  senderCompany    Transfer[] @relation("TransferFromCompany")
  recipientCompany Transfer[] @relation("TransferToCompany")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  company               Company?               @relation("CompanyToUser", fields: [companyId], references: [id])
  companyId             String?
  items                 Item[]                 @relation("UserToItem")
  senderTransfer        Transfer[]             @relation("TransferFromSender")
  recipientTransfer     Transfer[]             @relation("TransferToUser")
  adminTransfer         Transfer[]             @relation("TransferApprovedByAdmin")
  notifications         Notification[]         @relation("UserNotifications")

  // adminUser   User?   @relation("UserToAdmin", fields: [adminUserId], references: [id])
  // adminUserId String?
  // userUser    User[]  @relation("UserToAdmin")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationTokenWithPassword {
  id       String   @id @default(cuid())
  email    String   @unique
  password String?
  token    String   @unique
  expires  DateTime

  @@unique([email, token, password])
}

model Item {
  id          String    @id @default(uuid())
  name        String
  description String?
  brand       String?
  price       Float?
  quantity    Float?
  image       String?
  userId      String?
  user        User?     @relation("UserToItem", fields: [userId], references: [id], onDelete: Cascade)
  transferId  String?
  transfer    Transfer? @relation("ItemInTransfer", fields: [transferId], references: [id])
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Transfer {
  id                 String         @id @default(uuid())
  senderId           String
  image              String?
  sender             User           @relation("TransferFromSender", fields: [senderId], references: [id])
  recipientId        String
  recipient          User           @relation("TransferToUser", fields: [recipientId], references: [id])
  adminId            String
  admin              User           @relation("TransferApprovedByAdmin", fields: [adminId], references: [id])
  senderCompanyId    String
  senderCompany      Company        @relation("TransferFromCompany", fields: [senderCompanyId], references: [id])
  recipientCompanyId String
  recipientCompany   Company        @relation("TransferToCompany", fields: [recipientCompanyId], references: [id])
  items              Item[]         @relation("ItemInTransfer")
  status             TransferStatus @default(PENDING)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

enum TransferStatus {
  PENDING
  APPROVED
  DECLINED
  ACCEPTED
}

model Notification {
  id               String    @id @default(cuid())
  title            String
  body             String
  data             Json?
  userId           String
  user             User      @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  readAt           DateTime?
  fcmToken         String?
  notificationType String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

   @@unique([userId, fcmToken])
  @@index([userId, createdAt])
}
